<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionTypeComHandler" xml:space="preserve">
    <value>Chiamare un oggetto COM</value>
  </data>
  <data name="ActionTypeExecute" xml:space="preserve">
    <value>Avviare un programma</value>
  </data>
  <data name="ActionTypeSendEmail" xml:space="preserve">
    <value>Invia una email</value>
  </data>
  <data name="ActionTypeShowMessage" xml:space="preserve">
    <value>Mostra un messaggio</value>
  </data>
  <data name="ComHandlerAction" xml:space="preserve">
    <value>{3} {0:P}</value>
    <comment>0 = Class GUID; 1 = Data; 2 = Id</comment>
  </data>
  <data name="DOWAllDays" xml:space="preserve">
    <value>tutti i giorni</value>
  </data>
  <data name="EmailAction" xml:space="preserve">
    <value>{1} {0}</value>
    <comment>0 = Subject; 1 = To; 2 = Cc, 3 = Bcc, 4 = From, 5 = ReplyTo, 6 = Body, 7 = Server, 8 = Id</comment>
  </data>
  <data name="EndSentence" xml:space="preserve">
    <value>.</value>
  </data>
  <data name="ExecAction" xml:space="preserve">
    <value>{0} {1}</value>
    <comment>0 = Executable Path; 1 = Arguments; 2 = WorkingDirectory; 3 = Id</comment>
  </data>
  <data name="ListSeparator" xml:space="preserve">
    <value>,</value>
  </data>
  <data name="MOYAllMonths" xml:space="preserve">
    <value>tutti i mesi</value>
  </data>
  <data name="MultipleActions" xml:space="preserve">
    <value>Azioni multiple definite</value>
  </data>
  <data name="MultipleTriggers" xml:space="preserve">
    <value>Attivazione multiple definite</value>
  </data>
  <data name="ShowMessageAction" xml:space="preserve">
    <value>{0}</value>
    <comment>0 = Title; 1 = MessageBody; 2 = Id</comment>
  </data>
  <data name="TaskDefaultPrincipal" xml:space="preserve">
    <value>Autore</value>
  </data>
  <data name="TaskStateDisabled" xml:space="preserve">
    <value>Disabile</value>
  </data>
  <data name="TaskStateQueued" xml:space="preserve">
    <value>In coda</value>
  </data>
  <data name="TaskStateReady" xml:space="preserve">
    <value>Pronto</value>
  </data>
  <data name="TaskStateRunning" xml:space="preserve">
    <value>Corsa</value>
  </data>
  <data name="TaskStateUnknown" xml:space="preserve">
    <value>Sconosciuto</value>
  </data>
  <data name="TriggerAnyUser" xml:space="preserve">
    <value>Qualsiasi utente</value>
  </data>
  <data name="TriggerBoot1" xml:space="preserve">
    <value>All'avvio del sistema</value>
  </data>
  <data name="TriggerDaily1" xml:space="preserve">
    <value>A {0:t} ogni giorno</value>
  </data>
  <data name="TriggerDaily2" xml:space="preserve">
    <value>A {0:t} ogni {1} giorni</value>
  </data>
  <data name="TriggerEvent1" xml:space="preserve">
    <value>Evento personalizzato filtro</value>
  </data>
  <data name="TriggerEventBasic1" xml:space="preserve">
    <value>Su evento - Log: {0}</value>
    <comment>0 = Log name</comment>
  </data>
  <data name="TriggerEventBasic2" xml:space="preserve">
    <value>, Fonte: {0}</value>
    <comment>0 = Source name (appended after log)</comment>
  </data>
  <data name="TriggerEventBasic3" xml:space="preserve">
    <value>, EventID: {0}</value>
    <comment>0 = Event ID (appended after log or source)</comment>
  </data>
  <data name="TriggerIdle1" xml:space="preserve">
    <value>Quando il computer è inattivo</value>
  </data>
  <data name="TriggerLogon1" xml:space="preserve">
    <value>A collegarsi di {0}</value>
  </data>
  <data name="TriggerMonthly1" xml:space="preserve">
    <value>A {0:t} sul giorno {1} di {2}, a partire dal {0:d}</value>
    <comment>0 = StartBoundary; 1 = list of Days; 2 = list of Months</comment>
  </data>
  <data name="TriggerMonthlyDOW1" xml:space="preserve">
    <value>A {0:t} sul {1} {2:f} ogni {3}, a partire dal {0:d}</value>
    <comment>0 = StartBoundary; 1 = list of weeks of Month; 2 = list of Week Days; 3 = list of Months</comment>
  </data>
  <data name="TriggerRegistration1" xml:space="preserve">
    <value>Quando l'attività viene creato o modificato</value>
  </data>
  <data name="TriggerSessionConsoleConnect" xml:space="preserve">
    <value>Sulla connessione locale a {0}.</value>
    <comment>0 = UserId</comment>
  </data>
  <data name="TriggerSessionConsoleDisconnect" xml:space="preserve">
    <value>Il locale disconnettersi da {0}.</value>
    <comment>0 = UserId</comment>
  </data>
  <data name="TriggerSessionRemoteConnect" xml:space="preserve">
    <value>Sulla connessione remota a {0}.</value>
    <comment>0 = UserId</comment>
  </data>
  <data name="TriggerSessionRemoteDisconnect" xml:space="preserve">
    <value>Sul telecomando disconnettersi da {0}.</value>
    <comment>0 = UserId</comment>
  </data>
  <data name="TriggerSessionSessionLock" xml:space="preserve">
    <value>Sul blocco della workstation di {0}.</value>
    <comment>0 = UserId</comment>
  </data>
  <data name="TriggerSessionSessionUnlock" xml:space="preserve">
    <value>Su sblocco della workstation di {0}.</value>
    <comment>0 = UserId</comment>
  </data>
  <data name="TriggerSessionUserSession" xml:space="preserve">
    <value>sessione utente di {0}</value>
    <comment>0 = UserId</comment>
  </data>
  <data name="TriggerTime1" xml:space="preserve">
    <value>A {0:t} su {0:d}</value>
    <comment>0 = StartBoundary</comment>
  </data>
  <data name="TriggerTypeBoot" xml:space="preserve">
    <value>All'avvio</value>
  </data>
  <data name="TriggerTypeDaily" xml:space="preserve">
    <value>Quotidiano</value>
  </data>
  <data name="TriggerTypeEvent" xml:space="preserve">
    <value>Su un evento</value>
  </data>
  <data name="TriggerTypeIdle" xml:space="preserve">
    <value>Su di inattività</value>
  </data>
  <data name="TriggerTypeLogon" xml:space="preserve">
    <value>A effettuare l'accesso</value>
  </data>
  <data name="TriggerTypeMonthly" xml:space="preserve">
    <value>Mensile</value>
  </data>
  <data name="TriggerTypeMonthlyDOW" xml:space="preserve">
    <value>Mensile</value>
  </data>
  <data name="TriggerTypeRegistration" xml:space="preserve">
    <value>Alla creazione / modifica di attività</value>
  </data>
  <data name="TriggerTypeTime" xml:space="preserve">
    <value>Una volta</value>
  </data>
  <data name="TriggerTypeWeekly" xml:space="preserve">
    <value>Settimanale</value>
  </data>
  <data name="TriggerWeekly1Week" xml:space="preserve">
    <value>A {0:t} ogni {1} di ogni settimana, a partire {0: d}</value>
    <comment>0 = StartBoundary; 1 = list of Week Days</comment>
  </data>
  <data name="TriggerWeeklyMultWeeks" xml:space="preserve">
    <value>A {0:t} ogni {1} di {2} ogni settimana, a partire {0:d}</value>
    <comment>0 = StartBoundary; 1 = list of Week Days; 2 = WeekInterval</comment>
  </data>
  <data name="WWAllWeeks" xml:space="preserve">
    <value>tutte</value>
  </data>
  <data name="WWFifthWeek" xml:space="preserve">
    <value>quinta</value>
  </data>
  <data name="WWFirstWeek" xml:space="preserve">
    <value>prima</value>
  </data>
  <data name="WWFourthWeek" xml:space="preserve">
    <value>quarta</value>
  </data>
  <data name="WWLastWeek" xml:space="preserve">
    <value>scorsa</value>
  </data>
  <data name="WWSecondWeek" xml:space="preserve">
    <value>seconda</value>
  </data>
  <data name="WWThirdWeek" xml:space="preserve">
    <value>terza</value>
  </data>
  <data name="HyphenSeparator">
    <value>-</value>
  </data>
  <data name="TriggerDuration0">
    <value>indefinitamente</value>
  </data>
  <data name="TriggerDurationNot0">
    <value>per una durata di {0}</value>
  </data>
  <data name="TriggerEndBoundary">
    <value>Attivazione scade {0:G}.</value>
  </data>
  <data name="TriggerRepetition">
    <value>Dopo aver attivato, ripetere ogni {0} {1}.</value>
  </data>
  <data name="TriggerCustom1" xml:space="preserve">
    <value>Attivazione personalizata</value>
  </data>
  <data name="TriggerTypeCustom" xml:space="preserve">
    <value>Attivazione personalizata</value>
  </data>
  <data name="TriggerRepetitionShort" xml:space="preserve">
    <value>Ogni {0} {1}.</value>
  </data>
  <data name="TriggerDurationNot0Short" xml:space="preserve">
    <value>per {0}</value>
  </data>
  <data name="TriggerTypeSessionStateChange" xml:space="preserve">
    <value>Sul cambiamento di stato</value>
  </data>
  <data name="Error_TriggerEndBeforeStart" xml:space="preserve">
    <value>La data e l&amp;#39;ora in cui un trigger scade deve essere successiva al tempo in cui inizia o viene attivato.</value>
  </data>
</root>