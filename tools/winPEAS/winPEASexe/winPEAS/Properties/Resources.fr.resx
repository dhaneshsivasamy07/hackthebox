<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionTypeExecute" xml:space="preserve">
    <value>Démarrer un programme</value>
  </data>
  <data name="ActionTypeSendEmail" xml:space="preserve">
    <value>Envoyer un courrier électronique</value>
  </data>
  <data name="ActionTypeShowMessage" xml:space="preserve">
    <value>Afficher un message</value>
  </data>
  <data name="ComHandlerAction" xml:space="preserve">
    <value>{3} {0:P}</value>
  </data>
  <data name="DOWAllDays" xml:space="preserve">
    <value>tous les jours</value>
  </data>
  <data name="EmailAction" xml:space="preserve">
    <value>{1} {0}</value>
  </data>
  <data name="EndSentence" xml:space="preserve">
    <value>.</value>
  </data>
  <data name="ExecAction" xml:space="preserve">
    <value>{0} {1}</value>
  </data>
  <data name="HyphenSeparator" xml:space="preserve">
    <value>-</value>
  </data>
  <data name="ListSeparator" xml:space="preserve">
    <value>,</value>
  </data>
  <data name="MOYAllMonths" xml:space="preserve">
    <value>chaque mois</value>
  </data>
  <data name="MultipleActions" xml:space="preserve">
    <value>Plusieurs actions définies.</value>
  </data>
  <data name="MultipleTriggers" xml:space="preserve">
    <value>Plusieurs déclencheurs sont définis.</value>
  </data>
  <data name="ShowMessageAction" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="TaskDefaultPrincipal" xml:space="preserve">
    <value>Auteur</value>
  </data>
  <data name="TaskStateDisabled" xml:space="preserve">
    <value>Désactivé</value>
  </data>
  <data name="TaskStateQueued" xml:space="preserve">
    <value>En attente</value>
  </data>
  <data name="TaskStateReady" xml:space="preserve">
    <value>Prêt</value>
  </data>
  <data name="TaskStateRunning" xml:space="preserve">
    <value>En cours d'exécution</value>
  </data>
  <data name="TaskStateUnknown" xml:space="preserve">
    <value>Inconnu</value>
  </data>
  <data name="TriggerAnyUser" xml:space="preserve">
    <value>Tout utilisateur</value>
  </data>
  <data name="TriggerBoot1" xml:space="preserve">
    <value>Au démarrage du système</value>
  </data>
  <data name="TriggerCustom1" xml:space="preserve">
    <value>Personnaliser le déclencheur</value>
  </data>
  <data name="TriggerDuration0" xml:space="preserve">
    <value>Indéfiniment</value>
  </data>
  <data name="TriggerEvent1" xml:space="preserve">
    <value>Filtre d’événement personnalisé</value>
  </data>
  <data name="TriggerEventBasic2" xml:space="preserve">
    <value>, Source : {0}</value>
  </data>
  <data name="TriggerIdle1" xml:space="preserve">
    <value>Lorsque l’ordinateur est inactif</value>
  </data>
  <data name="TriggerLogon1" xml:space="preserve">
    <value>À l’ouverture de session de {0}</value>
  </data>
  <data name="TriggerRegistration1" xml:space="preserve">
    <value>Lors de la création ou de la modification de la tâche</value>
  </data>
  <data name="TriggerSessionSessionLock" xml:space="preserve">
    <value>Lors du verrouillage de la station de travail de {0}.</value>
  </data>
  <data name="TriggerSessionSessionUnlock" xml:space="preserve">
    <value>Lors du déverrouillage de la station de travail de {0}.</value>
  </data>
  <data name="TriggerSessionUserSession" xml:space="preserve">
    <value>session utilisateur de {0}</value>
  </data>
  <data name="TriggerTypeBoot" xml:space="preserve">
    <value>Au démarrage</value>
  </data>
  <data name="TriggerTypeCustom" xml:space="preserve">
    <value>Personnaliser le déclencheur</value>
  </data>
  <data name="TriggerTypeDaily" xml:space="preserve">
    <value>Tous les jours</value>
  </data>
  <data name="TriggerTypeEvent" xml:space="preserve">
    <value>Sur un événement</value>
  </data>
  <data name="TriggerTypeIdle" xml:space="preserve">
    <value>Après une période d'inactivité</value>
  </data>
  <data name="TriggerTypeLogon" xml:space="preserve">
    <value>À l’ouverture de session</value>
  </data>
  <data name="TriggerTypeMonthly" xml:space="preserve">
    <value>Tous les mois</value>
  </data>
  <data name="TriggerTypeMonthlyDOW" xml:space="preserve">
    <value>Tous les mois</value>
  </data>
  <data name="TriggerTypeRegistration" xml:space="preserve">
    <value>Lors de la création/modification de la tâche</value>
  </data>
  <data name="TriggerTypeSessionStateChange" xml:space="preserve">
    <value>Au changement de statut</value>
  </data>
  <data name="TriggerTypeTime" xml:space="preserve">
    <value>Une fois</value>
  </data>
  <data name="TriggerTypeWeekly" xml:space="preserve">
    <value>Hebdomadaire</value>
  </data>
  <data name="TriggerWeekly1Week" xml:space="preserve">
    <value>À {0:t} chaque {1} de chaque semaine, à partir du {0:d}</value>
  </data>
  <data name="TriggerWeeklyMultWeeks" xml:space="preserve">
    <value>À {0:t} chaque {1} de chaque {2} semaines, à partir du {0:d}</value>
  </data>
  <data name="WWAllWeeks" xml:space="preserve">
    <value>toutes les</value>
  </data>
  <data name="WWFifthWeek" xml:space="preserve">
    <value>cinquième</value>
  </data>
  <data name="WWFirstWeek" xml:space="preserve">
    <value>premier</value>
  </data>
  <data name="WWFourthWeek" xml:space="preserve">
    <value>quatrième</value>
  </data>
  <data name="WWLastWeek" xml:space="preserve">
    <value>dernier</value>
  </data>
  <data name="WWSecondWeek" xml:space="preserve">
    <value>deuxième</value>
  </data>
  <data name="WWThirdWeek" xml:space="preserve">
    <value>troisième</value>
  </data>
  <data name="TriggerDurationNot0Short" xml:space="preserve">
    <value>pour {0}</value>
  </data>
  <data name="TriggerRepetitionShort" xml:space="preserve">
    <value>Chaque {0} {1}.</value>
  </data>
  <data name="TriggerRepetition" xml:space="preserve">
    <value>Après déclenché, répéter chaque les {0} {1}.</value>
  </data>
  <data name="TriggerDurationNot0" xml:space="preserve">
    <value>pour une durée de {0}</value>
  </data>
  <data name="ActionTypeComHandler" xml:space="preserve">
    <value>Appeler un objet COM</value>
  </data>
  <data name="TriggerDaily1" xml:space="preserve">
    <value>À {0} tous les jours</value>
  </data>
  <data name="TriggerDaily2" xml:space="preserve">
    <value>À {0} tous les {1} jours</value>
  </data>
  <data name="TriggerEndBoundary" xml:space="preserve">
    <value>Déclencheur expire à {0:G}.</value>
  </data>
  <data name="TriggerMonthly1" xml:space="preserve">
    <value>À {0:t} le jour {1} de {2}, à compter du {0:d}.</value>
  </data>
  <data name="TriggerMonthlyDOW1" xml:space="preserve">
    <value>À {0:t} sur {1} {2} de chaque {3}, à partir du {0:d}.</value>
  </data>
  <data name="TriggerTime1" xml:space="preserve">
    <value>À {0:t} le {0:d}</value>
  </data>
  <data name="TriggerEventBasic1" xml:space="preserve">
    <value>Lors de l'événement - Journal: {0}</value>
  </data>
  <data name="TriggerEventBasic3" xml:space="preserve">
    <value>, ID d'événement: {0}</value>
  </data>
  <data name="TriggerSessionConsoleConnect" xml:space="preserve">
    <value>Lors de la connexion locale à {0}.</value>
  </data>
  <data name="TriggerSessionRemoteConnect" xml:space="preserve">
    <value>Lors de la connexion à distance à {0}.</value>
  </data>
  <data name="TriggerSessionConsoleDisconnect" xml:space="preserve">
    <value>Sur l’ordinateur local, se déconnecter de {0}.</value>
  </data>
  <data name="TriggerSessionRemoteDisconnect" xml:space="preserve">
    <value>Sur l’ordinateur distant, se déconnecter de {0}.</value>
  </data>
  <data name="Error_TriggerEndBeforeStart" xml:space="preserve">
    <value>La date et l&amp;#39;heure d&amp;#39;expiration d&amp;#39;un déclencheur doivent être postérieures à son heure de démarrage ou d&amp;#39;activation.!</value>
  </data>
</root>